generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model purchase {
  id                     Int          @id @default(autoincrement())
  user_id                Int
  type                   PurchaseType
  date_in                DateTime?
  date_out               DateTime?
  car_number             String?
  car_weight             Float?
  created_at             DateTime     @default(now())
  branch_id              Int
  mobile                 String?
  name                   String?
  weight                 Float?
  weight_in              Float?
  weight_out             Float?
  car_weight_in          Float?
  car_weight_out         Float?
  partner_type           String?
  product_name           String?
  note                   String?
  product_amount         Float?
  product_price_per_unit String?
  product_net_amount     Float?
  weight_fee             Float?
  put_fee                Float?
  subtract_bag           Float?
  subtract_adulteration  Float?
  subtract_moisture      Float?
  net_weight             Float?
  delivery_man           String?
  recipient              String?
  weigher                String?
  subtract_weight        Float?
  updated_at             DateTime?    @default(now())
  field_no               String?
  service_date           DateTime?
  branchs                branchs      @relation(fields: [branch_id], references: [id], onUpdate: Restrict)
  users                  users        @relation(fields: [user_id], references: [id], onUpdate: Restrict)
}

model stocks {
  id         Int       @id @default(autoincrement())
  name       String
  amount     Float
  price      Float
  unit       String
  created_at DateTime  @default(now())
  code       String?   @db.VarChar
  updated_at DateTime?
}

model stockspare {
  id             Int              @id @default(autoincrement())
  user_id        Int
  name           String
  amount         Int
  price_in       Float
  price_out      Float
  stock          Int
  profit         Float
  created_at     DateTime         @default(now())
  updated_at     DateTime?
  users          users            @relation(fields: [user_id], references: [id], onUpdate: Restrict)
  stockspare_log stockspare_log[]
}

model stockspare_log {
  id            Int            @id @default(autoincrement())
  type          StockspareType
  amount        Int
  created_at    DateTime       @default(now())
  stockspare_id Int
  user_id       Int
  stockspare    stockspare     @relation(fields: [stockspare_id], references: [id], onUpdate: Restrict)
  users         users          @relation(fields: [user_id], references: [id], onUpdate: Restrict)
}

model branchs {
  id              Int               @id @default(autoincrement())
  name            String
  no              Int
  created_at      DateTime          @default(now())
  map_user_branch map_user_branch[]
  purchase        purchase[]
}

model users {
  id                Int               @id @default(autoincrement())
  username          String
  password          String
  refresh_token     String?
  refresh_token_exp DateTime?         @db.Date
  created_at        DateTime          @default(now())
  updated_at        DateTime?
  map_user_branch   map_user_branch[]
  map_user_role     map_user_role[]
  purchase          purchase[]
  stockspare        stockspare[]
  stockspare_log    stockspare_log[]
}

model roles {
  id            Int             @id @default(autoincrement())
  name          String
  code          String
  map_user_role map_user_role[]
}

model map_user_role {
  id         Int      @id @default(autoincrement())
  user_id    Int
  role_id    Int
  created_at DateTime @default(now())
  roles      roles    @relation(fields: [role_id], references: [id], onUpdate: Restrict)
  users      users    @relation(fields: [user_id], references: [id], onUpdate: Restrict)
}

model map_user_branch {
  id         Int      @id @default(autoincrement())
  user_id    Int
  branch_id  Int
  created_at DateTime @default(now())
  branchs    branchs  @relation(fields: [branch_id], references: [id], onUpdate: Restrict)
  users      users    @relation(fields: [user_id], references: [id], onUpdate: Restrict)
}

model partner {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar
  created_at DateTime @default(now())
}

model vehicle {
  id             Int       @id @default(autoincrement())
  vehicle_number String    @db.VarChar
  vehicle_type   String
  vehicle_brand  String
  created_at     DateTime  @default(now())
  updated_at     DateTime?
}

enum PurchaseType {
  IN
  OUT
}

enum StockspareType {
  IMPORT
  EXPORT
}
