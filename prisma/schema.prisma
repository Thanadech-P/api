generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model purchase {
  id                     Int          @id @default(autoincrement())
  user_id                Int
  type                   PurchaseType
  date_in                DateTime?
  date_out               DateTime?
  car_number             String?
  car_weight             Float?
  created_at             DateTime     @default(now())
  amount                 Float?
  branch_id              Int
  mobile                 String?
  name                   String?
  total                  Float?
  weight                 Float?
  weight_in              Float?
  weight_out             Float?
  car_weight_in          Float?
  car_weight_out         Float?
  partner_type           String?
  product_name           String?
  note                   String?
  product_amount         Int?
  product_price_per_unit String?
  product_net_amount     Int?
  weight_fee             Int?
  put_fee                Int?
  subtract_bag           Int?
  subtract_adulteration  Int?
  subtract_moisture      Int?
  net_weight             Int?
  delivery_man           String?
  recipient              String?
  weigher                String?
  subtract_weight        Float?
  updated_at             DateTime?    @default(now())
  field_no               String?
  service_date           DateTime?
  branchs                branchs      @relation(fields: [branch_id], references: [id], onUpdate: Restrict)
  users                  users        @relation(fields: [user_id], references: [id], onUpdate: Restrict)
}

model stocks {
  id         Int      @id @default(autoincrement())
  name       String
  amount     Int
  price      Int
  unit       String
  created_at DateTime @default(now())
  code       String?  @db.VarChar
}

model branchs {
  id              Int               @id @default(autoincrement())
  name            String
  no              Int
  created_at      DateTime          @default(now())
  map_user_branch map_user_branch[]
  purchase        purchase[]
}

model users {
  id                Int               @id @default(autoincrement())
  username          String
  password          String
  refresh_token     String?
  refresh_token_exp DateTime?         @db.Date
  created_at        DateTime          @default(now())
  map_user_branch   map_user_branch[]
  map_user_role     map_user_role[]
  purchase          purchase[]
}

model roles {
  id            Int             @id @default(autoincrement())
  name          String
  code          String
  map_user_role map_user_role[]
}

model map_user_role {
  id         Int      @id @default(autoincrement())
  user_id    Int
  role_id    Int
  created_at DateTime @default(now())
  roles      roles    @relation(fields: [role_id], references: [id], onUpdate: Restrict)
  users      users    @relation(fields: [user_id], references: [id], onUpdate: Restrict)
}

model map_user_branch {
  id         Int      @id @default(autoincrement())
  user_id    Int
  branch_id  Int
  created_at DateTime @default(now())
  branchs    branchs  @relation(fields: [branch_id], references: [id], onUpdate: Restrict)
  users      users    @relation(fields: [user_id], references: [id], onUpdate: Restrict)
}

model partner {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar
  created_at DateTime @default(now())
}

enum PurchaseType {
  IN
  OUT
}
